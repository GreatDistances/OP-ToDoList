/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ListItem.js":
/*!*************************!*\
  !*** ./src/ListItem.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ListItem)\n/* harmony export */ });\nclass ListItem {\n    static newItemId = localStorage.getItem(\"newItemId\") || 100000;\n\n    constructor(itemTitle = \"\", itemDescription = \"\", itemPriority = \"\", itemDueDate = \"\", itemNotes = \"\", itemIsCompleted = false) {\n        this.itemId = `I${++ListItem.newItemId}`; // adds I prefix to each item\n        this.itemTitle = itemTitle;\n        this.itemDescription = itemDescription;\n        this.itemPriority = itemPriority;``\n        this.itemDueDate = itemDueDate;\n        this.itemNotes = itemNotes;\n        this.itemIsCompleted = itemIsCompleted;\n    }\n}\n\n//# sourceURL=webpack:///./src/ListItem.js?");

/***/ }),

/***/ "./src/ListManager.js":
/*!****************************!*\
  !*** ./src/ListManager.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _list_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./list.js */ \"./src/list.js\");\n/* harmony import */ var _ListItem_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ListItem.js */ \"./src/ListItem.js\");\n/* harmony import */ var _displaySideBarLists_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./displaySideBarLists.js */ \"./src/displaySideBarLists.js\");\n/* harmony import */ var _displayList_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./displayList.js */ \"./src/displayList.js\");\n/* harmony import */ var _focus_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./focus.js */ \"./src/focus.js\");\n\n\n\n\n\n\nclass ListManager {\n  constructor() {\n    this.listRepository = [\n      new _list_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"Unassigned Tasks\", []),\n      new _list_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"Demo List Personal\", [\n        new _ListItem_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\n          \"File 2023 personal taxes\",\n          \"Complete and file federal taxes for 2023 tax year\",\n          \"!!\",\n          \"2024-04-15\",\n          \"Download and reconcile all statements\",\n          false\n        ),\n        new _ListItem_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\n          \"Pick up Amazon packages\",\n          \"Location: Amazon locker on Main St\",\n          \"!\",\n          \"2024-02-21\",\n          \"New running shoes & phone charging cable\",\n          true\n        ),\n        new _ListItem_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\n          \"Shred old tax files\",\n          \"All files > 7 years old\",\n          \"\",\n          \"2025-01-01\",\n          \"\",\n          false\n        ),\n        new _ListItem_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\n          \"Oil change for SUV\",\n          \"Between 3000-5000 miles\",\n          \"!!\",\n          \"2024-03-01\",\n          \"\",\n          true\n        ),\n      ]),\n    ];\n    this.currentListId = 0;\n  }\n\n  saveToLocalStorage() {\n    const listManagerStringified = JSON.stringify(this);\n    localStorage.setItem(\"ListManager\", listManagerStringified);\n  }\n\n  loadFromLocalStorage() {\n    const listManagerFromStorage = localStorage.getItem(\"ListManager\");\n    const listManagerData = JSON.parse(listManagerFromStorage);\n    this.listManager = new ListManager();\n    Object.assign(this.listManager, listManagerData);\n    console.log(\"ListManager loaded from localStorage:\", this.listManager);\n  }\n\n  getAllLists() {\n    return this.listRepository;\n  }\n\n  getAllListIds() {\n    return this.listRepository.map((element) => element.listId);\n  }\n\n  getAllListTitles() {\n    return this.listRepository.map((element) => element.listTitle);\n  }\n\n  // TODO to prevent programs on program load:  setCurrentListId(-1);\n  setCurrentListId(num) {\n    this.currentListId = num;\n    this.saveToLocalStorage();\n    return this.currentListId;\n  }\n\n  getCurrentListId() {\n    return this.currentListId;\n  }\n\n  getCurrentListIndex() {\n    const listId = this.getCurrentListId();\n    if (listId === -1) {\n      console.log(`No current list index found`);\n      return -1;\n    }\n    const index = this.listRepository.map((e) => e.listId).indexOf(listId);\n    return index;\n  }\n\n  findListIndex(listId) {\n    const index = this.listRepository.map((e) => e.listId).indexOf(listId);\n    if (index === -1) {\n      console.log(`List ID# ${listId} not found, no list index available`);\n    }\n    return index;\n  }\n\n  addNewList(listObj) {\n    this.listRepository.unshift(listObj); // add new listObj to front of array\n    (0,_displaySideBarLists_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(); // re-render sidebar lists after new list is added\n    this.setCurrentListId(listObj.listId); // set currentListId to the new list's id\n    this.saveToLocalStorage();\n    (0,_displayList_js__WEBPACK_IMPORTED_MODULE_3__.displayList)(this.getCurrentListId()); // display the new list as current list\n    (0,_focus_js__WEBPACK_IMPORTED_MODULE_4__.focusListTitle)(listObj.listId); // focus the new list's title input\n    localStorage.setItem(\"newListId\", _list_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].newListId); // update localStorage with incremented newListId\n  }\n\n  deleteList(id) {\n    if (id === \"L10000\") {\n      console.log(\"Unassigned Tasks list cannot be deleted by user.\");\n      return;\n    }\n    const index = this.findListIndex(id);\n    if (index === -1) {\n      console.log(`List ID # ${id} not found for delete`);\n      return;\n    } else {\n      this.listRepository.splice(index, 1);\n      console.log(`List ID# ${id} deleted`)\n      ;(0,_displaySideBarLists_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(); // re-render sidebar lists after list is deleted;\n    }\n    this.saveToLocalStorage();\n  }\n\n  addListItem(itemObj, listId) {\n    for (let i = 0; i < this.listRepository.length; i++) {\n      if (this.listRepository[i].listId === listId) {\n        this.listRepository[i].listItems.unshift(itemObj);\n      }\n    }\n    localStorage.setItem(\"newItemId\", _ListItem_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].newItemId);\n    this.saveToLocalStorage();\n  }\n\n  deleteItem(itemId, listId) {\n    const itemIndex = this.getListItemIndex(itemId);\n    const listIndex = this.findListIndex(listId);\n    itemIndex !== -1\n      ? (this.listRepository[listIndex].listItems.splice(itemIndex, 1),\n        console.log(`Item ID# ${itemId} deleted`))\n      : console.log(`Item ID # ${itemId} not found for delete`);\n    this.saveToLocalStorage();\n  }\n\n  getListTitle(listId) {\n    const index = this.findListIndex(listId);\n    const title = this.listRepository[index].listTitle;\n    return title;\n  }\n\n  setListTitle(listId, newTitle) {\n    const index = this.findListIndex(listId);\n    if (index === -1) {\n      return;\n    }\n    if (this.listRepository[index].listTitle === newTitle) {\n      // if no change in title, return\n      return;\n    }\n    this.listRepository[index].listTitle = newTitle;\n    console.log(`List ID# ${listId} listTitle updated to ${newTitle}`);\n    (0,_displaySideBarLists_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n    this.saveToLocalStorage();\n  }\n\n  getListItemIndex(currentItemId) {\n    const listIndex = this.getCurrentListIndex();\n    if (listIndex === -1) {\n      return -1;\n    }\n    const list = this.listRepository[listIndex].listItems;\n    if (!list) {\n      return -1;\n    }\n    const itemIndex = list.findIndex((item) => item.itemId === currentItemId);\n    return itemIndex;\n  }\n\n  // this getter adds a listId property to each listItem, for use in \"All Tasks\" view\n  getAllListItemsAllLists() {\n    let allListItems = [];\n    this.listRepository.forEach(list => {\n        list.listItems.forEach(item => {\n            // Add listId property to each item\n            const listItemWithListId = { ...item, listId: list.listId }; // destructure object, add new listId property\n            allListItems.push(listItemWithListId); // push new objects into allListItems array\n        });\n    });\n    return allListItems;\n}\n\n  getAllListItems(listId) {\n    const index = this.findListIndex(listId);\n    const listItemsArr = this.listRepository[index].listItems;\n    if (listItemsArr.length < 1) {\n      return -1;\n    }\n    return listItemsArr;\n  }\n\n  getListItem(listId, itemId) {\n    const allListItems = this.getAllListItems(listId);\n    const listItem = allListItems.find((element) => element.itemId === itemId);\n    return(listItem);\n  }\n\n  setItemTitle(itemId, newTitle) {\n    const listIndex = this.getCurrentListIndex();\n    const itemIndex = this.getListItemIndex(itemId);\n    if (listIndex !== -1 && itemIndex !== -1) {\n      this.listRepository[listIndex].listItems[itemIndex].itemTitle = newTitle;\n    }\n    this.saveToLocalStorage();\n  }\n\n  setItemDescription(itemId, newDescription) {\n    const listIndex = this.getCurrentListIndex();\n    const itemIndex = this.getListItemIndex(itemId);\n    if (listIndex !== -1 && itemIndex !== -1) {\n      this.listRepository[listIndex].listItems[itemIndex].itemDescription =\n        newDescription;\n    }\n    this.saveToLocalStorage();\n  }\n\n  setItemDueDate(itemId, newDueDate) {\n    const listIndex = this.getCurrentListIndex();\n    const itemIndex = this.getListItemIndex(itemId);\n    if (listIndex !== -1 && itemIndex !== -1) {\n      this.listRepository[listIndex].listItems[itemIndex].itemDueDate =\n        newDueDate;\n    }\n    this.saveToLocalStorage();\n  }\n\n  setItemPriority(itemId, newPriority) {\n    const listIndex = this.getCurrentListIndex();\n    const itemIndex = this.getListItemIndex(itemId);\n    if (listIndex !== -1 && itemIndex !== -1) {\n      this.listRepository[listIndex].listItems[itemIndex].itemPriority =\n        newPriority;\n    }\n    this.saveToLocalStorage();\n  }\n\n  setItemNotes(itemId, newNotes) {\n    const listIndex = this.getCurrentListIndex();\n    const itemIndex = this.getListItemIndex(itemId);\n    if (listIndex !== -1 && itemIndex !== -1) {\n      this.listRepository[listIndex].listItems[itemIndex].itemNotes = newNotes;\n    }\n    this.saveToLocalStorage();\n  }\n\n  setItemIsCompleted(itemId) {\n    const listIndex = this.getCurrentListIndex();\n    const itemIndex = this.getListItemIndex(itemId);\n    if (listIndex !== -1 && itemIndex !== -1) {\n      if (this.listRepository[listIndex].listItems[itemIndex].itemIsCompleted === false) {\n        this.listRepository[listIndex].listItems[itemIndex].itemIsCompleted = true;\n      } else {\n        this.listRepository[listIndex].listItems[itemIndex].itemIsCompleted = false;\n    }\n    this.saveToLocalStorage();\n  }\n  }\n\n  setItemToDifferentList(itemId, currentListId, newListId) {\n    if (currentListId === newListId) {\n      return;\n    }\n    const listItem = this.getListItem(currentListId, itemId);\n    this.addListItem(listItem, newListId)\n    this.deleteItem(listItem.itemId, currentListId);\n    this.saveToLocalStorage();\n  }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ListManager);\n\n\n//# sourceURL=webpack:///./src/ListManager.js?");

/***/ }),

/***/ "./src/createListButtons.js":
/*!**********************************!*\
  !*** ./src/createListButtons.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _list_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./list.js */ \"./src/list.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ \"./src/index.js\");\n/* harmony import */ var _displaySideBarLists_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./displaySideBarLists.js */ \"./src/displaySideBarLists.js\");\n/* harmony import */ var _displayAllTasks_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./displayAllTasks.js */ \"./src/displayAllTasks.js\");\n/* harmony import */ var _displayList_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./displayList.js */ \"./src/displayList.js\");\n\n\n\n\n\n\nconst createListButtons = () => {\n  const newListBtn = document.querySelector(\"#newListBtn\");\n  newListBtn.addEventListener(\"click\", () => {\n    _index_js__WEBPACK_IMPORTED_MODULE_1__.listManager.addNewList(_list_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createList(\"\"));\n  });\n\n  const displayAllTasksBtn = document.querySelector(\"#displayAllTasksBtn\");\n  displayAllTasksBtn.addEventListener(\"click\", () => {\n    (0,_displayAllTasks_js__WEBPACK_IMPORTED_MODULE_3__.displayAllTasks)();\n  });\n\n  const displayUnassignedTasksBtn = document.querySelector(\"#displayUnassignedTasksBtn\");\n  displayUnassignedTasksBtn.addEventListener(\"click\", () => {\n    (0,_displayList_js__WEBPACK_IMPORTED_MODULE_4__.displayList)(\"L10000\");\n  });\n\n  let sortFlag = \"\";\n\n  const listBtnDivSecondaryTwo = document.querySelector(\"#listBtnDivSecondaryTwo\");\n  listBtnDivSecondaryTwo.classList.add(\"listBtnDivSecondaryTwo\");\n\n  const listBtnSubContainer = document.createElement(\"div\");\n  listBtnSubContainer.classList.add(\"listBtnSubContainer\");\n\n  const sortListsByIdBtn = document.createElement(\"button\");\n  sortListsByIdBtn.innerText = \"Sort By ID\";\n  sortListsByIdBtn.classList.add(\"normal-button\");\n  sortListsByIdBtn.addEventListener(\"click\", () => {\n    if (sortFlag !== \"listIdAsc\") {\n      sortFlag = \"listIdAsc\";\n      sortListsAsc(\"listId\");\n    } else if (sortFlag === \"listIdAsc\") {\n      sortListsDesc(\"listId\");\n      sortFlag = \"listIdDesc\";\n    }\n    (0,_displaySideBarLists_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n  });\n\n  const sortListsByTitleBtn = document.createElement(\"button\");\n  sortListsByTitleBtn.classList.add(\"normal-button\");\n  sortListsByTitleBtn.innerText = \"Sort By Name\";\n  sortListsByTitleBtn.addEventListener(\"click\", () => {\n    if (sortFlag !== \"listTitleAsc\") {\n      sortFlag = \"listTitleAsc\";\n      sortListsAsc(\"listTitle\");\n    } else if (sortFlag === \"listTitleAsc\") {\n      sortListsDesc(\"listTitle\");\n      sortFlag = \"listTitleDesc\";\n    }\n    (0,_displaySideBarLists_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n  });\n\n  listBtnDivSecondaryTwo.append(sortListsByTitleBtn, sortListsByIdBtn);\n\n  const sortListsAsc = (text) => {\n    let sortedLists = _index_js__WEBPACK_IMPORTED_MODULE_1__.listManager.getAllLists();\n    sortedLists = sortedLists.sort((a, b) => {\n      if (a[text] < b[text]) {\n        return -1;\n      } else if (a[text] > b[text]) {\n        return 1;\n      }\n      return 0;\n    });\n/*     sortedLists.forEach((listItem) => {\n      console.log(listItem);\n    }); */\n    return sortedLists;\n  };\n\n  // logic for sorting items descending\n  const sortListsDesc = (text) => {\n    let sortedLists = _index_js__WEBPACK_IMPORTED_MODULE_1__.listManager.getAllLists();\n    sortedLists = sortedLists.sort((a, b) => {\n      if (b[text] < a[text]) {\n        return -1;\n      } else if (b[text] > a[text]) {\n        return 1;\n      }\n      return 0;\n    });\n/*     sortedLists.forEach((listItem) => {\n      console.log(listItem);\n    }); */\n    return sortedLists;\n  };\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createListButtons);\n\n\n//# sourceURL=webpack:///./src/createListButtons.js?");

/***/ }),

/***/ "./src/createListItem.js":
/*!*******************************!*\
  !*** ./src/createListItem.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createListItem: () => (/* binding */ createListItem)\n/* harmony export */ });\n/* harmony import */ var _ListItem_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ListItem.js */ \"./src/ListItem.js\");\n\n\nconst createListItem = (itemTitle, description, priority, dueDate, notes) => {\n    return new _ListItem_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](itemTitle, description, priority, dueDate, notes);\n}\n\n\n\n//# sourceURL=webpack:///./src/createListItem.js?");

/***/ }),

/***/ "./src/displayAllTasks.js":
/*!********************************!*\
  !*** ./src/displayAllTasks.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   displayAllTasks: () => (/* binding */ displayAllTasks)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"./src/index.js\");\n/* harmony import */ var _createListItem_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createListItem.js */ \"./src/createListItem.js\");\n/* harmony import */ var _displayListItemFromObj_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./displayListItemFromObj.js */ \"./src/displayListItemFromObj.js\");\n\n\n\n\n// NOTE:  This module renders the \"All Tasks\" view, by use of displayListItemFromObj.js.\n// This code is slightly distinct from code in \"displayList\" and \"displayListItemsByListId\", which are used to render views of individual lists and their listItems.\n\nconst displayAllTasks = () => {\n  let displayTitle;\n\n  const noTasksMessage = document.createElement(\"div\");\n\n  const itemViewHeaderContainer = document.querySelector(\n    \"#itemViewHeaderContainer\"\n  );\n  const itemContainerContainer = document.querySelector(\n    \"#itemContainerContainer\"\n  );\n  const listTitleContainer = document.createElement(\"div\");\n  const listTitleH1 = document.createElement(\"h1\");\n  const listIdP = document.createElement(\"p\");\n  const listItemBtnDivContainer = document.createElement(\"div\");\n  listItemBtnDivContainer.classList.add(\"listItemBtnDivContainer\");\n  const listItemSortBtnDiv = document.createElement(\"div\");\n  listItemSortBtnDiv.classList.add(\"listItemSortBtnDiv\");\n\n  itemViewHeaderContainer.innerHTML = \"\";\n\n  const newItemBtn = document.createElement(\"button\");\n  const sortByDateBtn = document.createElement(\"button\");\n  const sortByItemIsCompletedBtn = document.createElement(\"button\");\n  const sortByPriorityBtn = document.createElement(\"button\");\n\n  listTitleContainer.classList.add(\"listTitleContainer\");\n\n  let sortFlag = \"\";\n  let allListItems = [];\n  allListItems = _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.getAllListItemsAllLists();\n  itemContainerContainer.innerHTML = \"\";\n\n  displayTitle = `All Tasks`;\n  listTitleH1.innerText = displayTitle;\n  listIdP.innerText = \"Viewing All\";\n\n  const loopThruItems = () => {\n    itemContainerContainer.innerHTML = \"\";\n    if (allListItems.length < 1) {\n      noTasksMessage.classList.add(\"itemContainerNoTasks\");\n      noTasksMessage.innerText = \"There are currently no tasks in the system.\";\n      itemContainerContainer.append(noTasksMessage);\n    } else {\n      allListItems.forEach((item) => (0,_displayListItemFromObj_js__WEBPACK_IMPORTED_MODULE_2__.displayListItemFromObj)(item));\n    }\n  };\n\n  const sortItemsAsc = (property = \"itemDueDate\", arr = allListItems) => {\n    arr.sort((a, b) => {\n      if (b[property] > a[property]) {\n        return -1;\n      } else if (b[property] < a[property]) {\n        return 1;\n      }\n      return 0;\n    });\n    // console.log(arr);\n  };\n\n  const sortItemsDesc = (property, arr) => {\n    arr.sort((a, b) => {\n      if (b[property] < a[property]) {\n        return -1;\n      } else if (b[property] > a[property]) {\n        return 1;\n      }\n      return 0;\n    });\n    // console.log(arr);\n  };\n\n  // new item button\n  const createNewItemBtn = () => {\n    newItemBtn.classList.add(\"main-button\");\n    newItemBtn.innerText = \"New Task\";\n    newItemBtn.addEventListener(\"click\", () => {\n      _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.addListItem((0,_createListItem_js__WEBPACK_IMPORTED_MODULE_1__.createListItem)(), \"L10000\");\n      allListItems = _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.getAllListItemsAllLists();\n      displayAllTasks();\n    });\n    listItemBtnDivContainer.append(newItemBtn);\n  };\n\n  // sort by date button\n  const createSortByDateBtn = () => {\n    sortByDateBtn.classList.add(\"normal-button\");\n    sortByDateBtn.innerText = \"Sort By Date\";\n    listItemSortBtnDiv.append(sortByDateBtn);\n    sortByDateBtn.addEventListener(\"click\", () => {\n      if (sortFlag === \"itemDueDateAsc\") {\n        sortItemsDesc(\"itemDueDate\", allListItems);\n        sortFlag = \"itemDueDateDesc\";\n      } else {\n        sortItemsAsc(\"itemDueDate\", allListItems);\n        sortFlag = \"itemDueDateAsc\";\n      }\n      loopThruItems();\n    });\n    listItemSortBtnDiv.append(sortByDateBtn);\n  };\n\n  // sort by priority button\n  const createSortByPriorityBtn = () => {\n    sortByPriorityBtn.classList.add(\"normal-button\");\n    sortByPriorityBtn.innerText = \"Sort By Priority\";\n    listItemSortBtnDiv.append(sortByPriorityBtn);\n    sortByPriorityBtn.addEventListener(\"click\", () => {\n      if (sortFlag !== \"itemPriorityDesc\") {\n        sortFlag = \"itemPriorityDesc\";\n        sortItemsDesc(\"itemPriority\", allListItems);\n      } else if (sortFlag === \"itemPriorityDesc\") {\n        sortItemsAsc(\"itemPriority\", allListItems);\n        sortFlag = \"itemPriorityAsc\";\n      }\n      loopThruItems();\n    });\n    listItemSortBtnDiv.append(sortByPriorityBtn);\n  };\n\n  // sort by is completed button\n  const createSortByItemIsCompletedBtn = () => {\n    sortByItemIsCompletedBtn.classList.add(\"normal-button\");\n    sortByItemIsCompletedBtn.innerText = \"Sort By Completion\";\n    listItemSortBtnDiv.append(sortByItemIsCompletedBtn);\n    sortByItemIsCompletedBtn.addEventListener(\"click\", () => {\n      if (sortFlag !== \"itemIsCompletedAsc\") {\n        sortFlag = \"itemIsCompletedAsc\";\n        sortItemsAsc(\"itemIsCompleted\", allListItems);\n      } else if (sortFlag === \"itemIsCompletedAsc\") {\n        sortItemsDesc(\"itemIsCompleted\", allListItems);\n        sortFlag = \"itemIsCompletedDesc\";\n      }\n      loopThruItems();\n    });\n    listItemSortBtnDiv.append(sortByItemIsCompletedBtn);\n  };\n\n  // Loop through list to dynamically generate title and id fields, or no tasks message\n  if (allListItems.length === 0) {\n    noTasksMessage.classList.add(\"itemContainerNoTasks\");\n    noTasksMessage.innerText = \"There are currently no tasks in this project.\";\n    itemContainerContainer.append(noTasksMessage);\n  }\n\n  sortItemsDesc(\"itemId\", allListItems); // TODO - improved logic would be to copy the array, then unshift new item to it.\n  createNewItemBtn();\n  createSortByDateBtn();\n  createSortByItemIsCompletedBtn();\n  createSortByPriorityBtn();\n  listTitleContainer.append(listTitleH1, listIdP); // add list title & list id to header container\n  listItemBtnDivContainer.append(newItemBtn); // add new item button to header button main container\n  listItemSortBtnDiv.append(sortByDateBtn);\n  listItemSortBtnDiv.append(sortByItemIsCompletedBtn);\n  listItemSortBtnDiv.append(sortByPriorityBtn);\n  listItemBtnDivContainer.append(listItemSortBtnDiv); // add sort buttons to header button main container\n  itemViewHeaderContainer.append(listTitleContainer); // add title and id container to header container\n  itemViewHeaderContainer.append(listItemBtnDivContainer); // add buttons to header container\n\n  loopThruItems(); // initial load of listItems for display\n};\n\n\n\n\n//# sourceURL=webpack:///./src/displayAllTasks.js?");

/***/ }),

/***/ "./src/displayList.js":
/*!****************************!*\
  !*** ./src/displayList.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   displayList: () => (/* binding */ displayList)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"./src/index.js\");\n/* harmony import */ var _displayListItemsByListId_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./displayListItemsByListId.js */ \"./src/displayListItemsByListId.js\");\n/* harmony import */ var _createListItem_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createListItem.js */ \"./src/createListItem.js\");\n\n\n\n\n// NOTE:  This module renders views of individual lists, by use of displayListItemsByListId.js module.\n// This code is slightly distinct from code in \"displayAllTasks\" and \"displayListItemFromObj\", which are used to render \"All Tasks\" view.\n\nlet sortFlag = \"\";\n\nconst displayList = (id) => {\n\n  const lists = [..._index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.getAllLists()];\n\n  _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.setCurrentListId(id);\n\n  let displayTitle;\n  let displayListId;\n\nconst noTasksMessage = document.createElement(\"div\");\n\nconst itemViewHeaderContainer = document.querySelector(\"#itemViewHeaderContainer\");\nconst itemContainerContainer = document.querySelector(\"#itemContainerContainer\");\nconst listTitleContainer = document.createElement(\"div\");\nconst listTitleH1 = document.createElement(\"h1\");\nconst listIdP = document.createElement(\"p\");\nconst listItemBtnDivContainer = document.createElement(\"div\");\nlistItemBtnDivContainer.classList.add(\"listItemBtnDivContainer\");\nconst listItemSortBtnDiv = document.createElement(\"div\");\n\nitemViewHeaderContainer.innerHTML = \"\";\n\nconst newItemBtn = document.createElement(\"button\");\nconst sortByDateBtn = document.createElement(\"button\");\nconst sortByItemIsCompletedBtn = document.createElement(\"button\");\nconst sortByPriorityBtn = document.createElement(\"button\");\n\n  listTitleContainer.classList.add(\"listTitleContainer\");\n\n  listItemSortBtnDiv.classList.add(\"listItemSortBtnDiv\");\n\n  // new item button\n  const createNewItemBtn = () => {\n    newItemBtn.classList.add(\"main-button\");\n    newItemBtn.innerText = \"New Task\";\n    newItemBtn.addEventListener(\"click\", () => {\n      const currentListId = _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.getCurrentListId();\n      _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.addListItem((0,_createListItem_js__WEBPACK_IMPORTED_MODULE_2__.createListItem)(), currentListId);\n      (0,_displayListItemsByListId_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(currentListId);\n    });\n    listItemBtnDivContainer.append(newItemBtn);\n  };\n\n  // sort by date button\n  const createSortByDateBtn = () => {\n    sortByDateBtn.classList.add(\"normal-button\");\n    sortByDateBtn.innerText = \"Sort By Date\";\n    sortByDateBtn.addEventListener(\"click\", () => {\n        if (sortFlag !== \"itemDueDateAsc\") {\n            sortFlag = \"itemDueDateAsc\";\n            sortItemsDesc(\"itemDueDate\");\n        } else if (sortFlag === \"itemDueDateAsc\") {\n            sortItemsAsc(\"itemDueDate\");\n            sortFlag = \"itemDueDateDesc\";\n        }\n        loopThruList();\n    });\n    listItemSortBtnDiv.append(sortByDateBtn);\n  };\n\n  // sort by priority button\n  const createSortByPriorityBtn = () => {\n\n    sortByPriorityBtn.classList.add(\"normal-button\");\n    sortByPriorityBtn.innerText = \"Sort By Priority\";\n    sortByPriorityBtn.addEventListener(\"click\", () => {\n      if (sortFlag !== \"itemPriorityDesc\") {\n        sortFlag = \"itemPriorityDesc\";\n        sortItemsDesc(\"itemPriority\");\n      } else if (sortFlag === \"itemPriorityDesc\") {\n        sortItemsAsc(\"itemPriority\");\n        sortFlag = \"itemPriorityAsc\";\n      }\n      loopThruList();\n    });\n    listItemSortBtnDiv.append(sortByPriorityBtn);\n  };\n\n  // sort by is completed button\n  const createSortByItemIsCompletedBtn = () => {\n    sortByItemIsCompletedBtn.classList.add(\"normal-button\");\n    sortByItemIsCompletedBtn.innerText = \"Sort By Completion\";\n    sortByItemIsCompletedBtn.addEventListener(\"click\", () => {\n      if (sortFlag !== \"itemIsCompletedAsc\") {\n        sortFlag = \"itemIsCompletedAsc\";\n        sortItemsAsc(\"itemIsCompleted\");\n      } else if (sortFlag === \"itemIsCompletedAsc\") {\n        sortItemsDesc(\"itemIsCompleted\");\n        sortFlag = \"itemIsCompletedDesc\";\n      }\n      loopThruList();\n    });\n    listItemSortBtnDiv.append(sortByItemIsCompletedBtn);\n  };\n\n  // loop through list to dynamically generate title and id fields, or no tasks message\n  const loopThruList = () => {\n    itemContainerContainer.innerHTML = \"\";\n  for (let i = 0; i < lists.length; i++) {\n    if (lists[i].listId === id) {\n      if (lists[i].listTitle === \"\") {\n        displayTitle = \"Untitled Project\";\n      } else {\n        displayTitle = `${lists[i].listTitle}`;\n      }\n      displayListId = `ID # ${lists[i].listId}`;\n      listTitleH1.innerText = displayTitle;\n      listIdP.innerText = displayListId;\n      if (lists[i].listItems.length > 0) {\n        (0,_displayListItemsByListId_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(id);\n      } else {\n        noTasksMessage.classList.add(\"itemContainerNoTasks\");\n        noTasksMessage.innerText =\n          \"There are currently no tasks in this project.\";\n        itemContainerContainer.append(noTasksMessage);\n      }\n    }\n    }\n  }\n\n  // render page view with buttons and DOM elements\n  createNewItemBtn();\n  createSortByDateBtn();\n  createSortByItemIsCompletedBtn();\n  createSortByPriorityBtn();\n  listTitleContainer.append(listTitleH1, listIdP); // add list title & list id to header container\n  listItemBtnDivContainer.append(newItemBtn); // add new item button to header button main container\n  listItemSortBtnDiv.append(sortByDateBtn);\n  listItemSortBtnDiv.append(sortByItemIsCompletedBtn);\n  listItemSortBtnDiv.append(sortByPriorityBtn);\n  listItemBtnDivContainer.append(listItemSortBtnDiv); // add sort buttons to header button main container\n  itemViewHeaderContainer.append(listTitleContainer); // add title and id container to header container\n  itemViewHeaderContainer.append(listItemBtnDivContainer); // add buttons to header container\n  // loopThruList of listItems\n  loopThruList();\n\n};\n\n// logic for sorting items ascending\nconst sortItemsAsc = (text) => {\n  const currentListId = _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.getCurrentListId();\n  let sortedItems = _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.getAllListItems(currentListId);\n  sortedItems = sortedItems.sort((a, b) => {\n    if (a[text] < b[text]) {\n      return -1;\n    } else if (a[text] > b[text]) {\n      return 1;\n    }\n    return 0;\n  });\n/*   sortedItems.forEach((listItem) => {\n    console.log(listItem);\n  }); */\n  return sortedItems;\n};\n\n// logic for sorting items descending\nconst sortItemsDesc = (text) => {\n  const currentListId = _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.getCurrentListId();\n  let sortedItems = _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.getAllListItems(currentListId);\n  sortedItems = sortedItems.sort((a, b) => {\n    if (b[text] < a[text]) {\n      return -1;\n    } else if (b[text] > a[text]) {\n      return 1;\n    }\n    return 0;\n  });\n/*   sortedItems.forEach((listItem) => {\n    console.log(listItem);\n  }); */\n  return sortedItems;\n};\n\n\n\n//# sourceURL=webpack:///./src/displayList.js?");

/***/ }),

/***/ "./src/displayListItemFromObj.js":
/*!***************************************!*\
  !*** ./src/displayListItemFromObj.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   displayListItemFromObj: () => (/* binding */ displayListItemFromObj)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"./src/index.js\");\n/* harmony import */ var _displayAllTasks_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./displayAllTasks.js */ \"./src/displayAllTasks.js\");\n\n\n\n// NOTE:  This module renders views of individual listItems, and is called by displayAllTasks.\n// This code is slightly distinct from code in \"displayList\" and \"displayListItemsByListId\", which are used to render views of individual lists and their listItems.\n\nconst displayListItemFromObj = (item) => {\n\n  let listIdArr = _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.getAllListIds();\n  let listTitlesArr = _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.getAllListTitles();\n\n  // parent of itemContainer\n  const itemContainerContainer = document.querySelector(\n    \"#itemContainerContainer\"\n  );\n  itemContainerContainer.classList.add(\"itemContainerContainer\");\n\n  // child of itemContainerContainer, parent of itemIsCompletedCheckBoxDiv, itemContainer, deleteItemBtnContainer\n  const itemContainer = document.createElement(\"div\");\n  itemContainer.classList.add(\"itemContainer\");\n\n  // child of itemContainer, sibling of itemFieldsContainer, deleteItemBtnContainer\n  const itemIsCompletedCheckBoxDiv = document.createElement(\"div\");\n  itemIsCompletedCheckBoxDiv.classList.add(\"itemIsCompletedCheckBoxDiv\");\n  itemContainer.append(itemIsCompletedCheckBoxDiv);\n\n  // child of itemContainer, sibling of itemIsCompletedCheckBoxDiv, deleteItemBtnContainer\n  const itemFieldsContainer = document.createElement(\"div\");\n  itemFieldsContainer.classList.add(\"itemFieldsContainer\");\n  itemContainer.append(itemFieldsContainer);\n\n  // child of itemContainer, sibling of itemFieldsContainer, itemIsCompletedCheckBoxDiv\n  const deleteItemBtnContainer = document.createElement(\"div\");\n  deleteItemBtnContainer.classList.add(\"deleteItemBtnContainer\");\n  itemContainer.append(deleteItemBtnContainer);\n\n  // create text inputs on listItems\n  const createTextField = (text, container, method) => {\n    const value = item[text];\n    let enterKeyPressed = false;\n    const cellContainer = document.createElement(\"div\");\n    const cell = document.createElement(\"input\");\n    cell.setAttribute(`data-${text}`, item.itemId);\n    cell.classList.add(\"fields\");\n    const br = document.createElement(\"br\");\n    const label = document.createElement(\"label\");\n    cell.value = value;\n    label.classList.add(\"listItemLabel\");\n    label.innerText = text.slice(4);\n    cell.contentEditable = \"true\";\n    cell.addEventListener(\"keypress\", function (e) {\n      _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.setCurrentListId(item.listId);\n      if (e.key === \"Enter\") {\n        cell.innerText;\n        _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager[method](item.itemId, cell.value); // sets value in listManager\n        cell.blur();\n        e.preventDefault();\n      }\n    });\n    cell.onblur = () => {\n      _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.setCurrentListId(item.listId);\n      if (enterKeyPressed) {\n        enterKeyPressed = false;\n        return;\n      }\n      _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager[method](item.itemId, cell.value); // sets value in listManager\n    };\n    cellContainer.append(cell, br, label);\n    container.append(cellContainer);\n  };\n\n  // create date inputs on listItems\n  const createDateField = (text, container, method) => {\n    const value = item.itemDueDate;\n    const cellContainer = document.createElement(\"div\");\n    const cell = document.createElement(\"input\");\n    cell.setAttribute(`data-${text}`, item.itemId);\n    cell.classList.add(\"fields\");\n    const br = document.createElement(\"br\");\n    const label = document.createElement(\"label\");\n    label.classList.add(\"listItemLabel\");\n    label.innerText = \"Due Date\";\n    cell.setAttribute(\"type\", \"date\");\n    cell.value = value;\n    if (value === \"\" || value === null || value === undefined) {\n      cell.style.color = \"lightGrey\";\n    }\n    cell.onchange = () => {\n      _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.setCurrentListId(item.listId);\n      _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager[method](item.itemId, cell.value); // sets value in listManager\n      if (\n        cell.value !== \"\" &&\n        cell.value !== null &&\n        cell.value !== undefined\n      ) {\n        cell.style.color = \"black\";\n      } else if (\n        cell.value === \"\" ||\n        cell.value === null ||\n        cell.value === undefined\n      ) {\n        cell.style.color = \"lightGrey\";\n      }\n    };\n    cellContainer.append(cell, br, label);\n    container.append(cellContainer);\n  };\n\n  // create priority select inputs on listItems\n  const createSelectPriority = (text, container, method) => {\n    const value = item[text];\n    const cellContainer = document.createElement(\"div\");\n    const cell = document.createElement(\"select\");\n    cell.setAttribute(`data-${text}`, item.itemId);\n    cell.classList.add(\"fields\");\n    const br = document.createElement(\"br\");\n    const label = document.createElement(\"label\");\n    label.classList.add(\"listItemLabel\");\n    label.innerText = text.slice(4);\n    const optArr = [\"\", \"!\", \"!!\", \"!!!\"];\n    for (let i = 0; i < optArr.length; i++) {\n      const opt = document.createElement(\"option\");\n      opt.value = optArr[i];\n      opt.text = optArr[i];\n      cell.style.fontWeight = \"bold\";\n      cell.appendChild(opt);\n    }\n    cell.value = value;\n    cell.onblur = () => {\n      _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.setCurrentListId(item.listId);\n      _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager[method](item.itemId, cell.value); // sets value in listManager\n    };\n    cellContainer.append(cell, br, label);\n    container.append(cellContainer);\n  };\n\n    // create listId select inputs on listItems\n  const createSelectListId = (text, container, method) => {\n    const value = item.listId;\n    const cellContainer = document.createElement(\"div\");\n    const cell = document.createElement(\"select\");\n    cell.setAttribute(`data-${text}`, item.itemId);\n    cell.classList.add(\"fields\");\n    const br = document.createElement(\"br\");\n    const label = document.createElement(\"label\");\n    label.classList.add(\"listItemLabel\");\n    label.innerText = \"List\";\n    const optArr = [...listIdArr];\n    const optArrDisplay = [...listTitlesArr];\n    for (let i = 0; i < optArr.length; i++) {\n      const opt = document.createElement(\"option\");\n      opt.value = optArr[i];\n      opt.text = `${optArrDisplay[i]} - ID# ${optArr[i]}`;\n      cell.appendChild(opt);\n    }\n    cell.value = value;\n    cell.onchange = () => {\n      _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.setCurrentListId(item.listId); // without this, \"All Tasks\" list will not reference item fields + buttons correctly on load.\n      _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager[method](item.itemId, item.listId, cell.value); // sets value in listManager\n    };\n    cellContainer.append(cell, br, label);\n    container.append(cellContainer);\n  };\n\n  // create itemIsCompleted check box on listItems\n  const createItemIsCompletedCheckbox = () => {\n    const itemIsCompletedCheckbox = document.createElement(\"INPUT\");\n    itemIsCompletedCheckbox.setAttribute(\"type\", \"checkbox\");\n    itemIsCompletedCheckbox.checked = item.itemIsCompleted;\n    itemIsCompletedCheckbox.addEventListener(\"click\", () => {\n      _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.setCurrentListId(item.listId); // without this, \"All Tasks\" list will not reference item fields + buttons correctly on load.\n      _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.setItemIsCompleted(item.itemId);\n    });\n    itemIsCompletedCheckBoxDiv.classList.add(\"itemIsCompletedCheckBoxDiv\");\n    itemIsCompletedCheckBoxDiv.append(itemIsCompletedCheckbox);\n  };\n\n  // create delete item btn on listItems\n  const createDeleteItemBtn = () => {\n    const deleteItemBtn = document.createElement(\"button\");\n    deleteItemBtn.innerText = \"X\";\n    deleteItemBtn.classList.add(\"deleteBtn\");\n    deleteItemBtn.addEventListener(\"click\", () => {\n      _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.setCurrentListId(item.listId); // without this, \"All Tasks\" list will not reference item fields + buttons correctly on load.\n      _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.deleteItem(item.itemId, item.listId);\n      (0,_displayAllTasks_js__WEBPACK_IMPORTED_MODULE_1__.displayAllTasks)();\n    });\n    deleteItemBtnContainer.append(deleteItemBtn);\n    itemContainer.append(deleteItemBtnContainer);\n  };\n\n  // render listItem view with buttons, add to DOM\n  createItemIsCompletedCheckbox();\n  createTextField(\"itemTitle\", itemFieldsContainer, \"setItemTitle\");\n  createTextField(\"itemDescription\", itemFieldsContainer, \"setItemDescription\");\n  //createTextField(\"itemNotes\", itemFieldsContainer, \"setItemNotes\"); // has worked well, just removed to de-clutter view\n  createSelectListId(\"listId\", itemFieldsContainer, \"setItemToDifferentList\");\n  createDateField(\"itemDueDate\", itemFieldsContainer, \"setItemDueDate\");\n  createSelectPriority(\"itemPriority\", itemFieldsContainer, \"setItemPriority\");\n  createDeleteItemBtn();\n  itemContainerContainer.append(itemContainer);\n};\n\n\n\n\n//# sourceURL=webpack:///./src/displayListItemFromObj.js?");

/***/ }),

/***/ "./src/displayListItemsByListId.js":
/*!*****************************************!*\
  !*** ./src/displayListItemsByListId.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"./src/index.js\");\n/* harmony import */ var _displayList_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./displayList.js */ \"./src/displayList.js\");\n\n\n\n// NOTE:  This module renders views of individual listItems, and is called by displayList.js module.\n// This code is slightly distinct from code in \"displayAllTasks\" and \"displayListItemFromObj\", which are used to render \"All Tasks\" view.\n\nconst displayListItemsByListId = (id) => {\n  const itemViewMain = document.querySelector(\"#itemViewMain\");\n  const itemContainerContainer = document.querySelector(\n    \"#itemContainerContainer\"\n  );\n  itemViewMain.append(itemContainerContainer);\n  itemContainerContainer.classList.add(\"itemContainerContainer\");\n\n  itemContainerContainer.innerHTML = \"\";\n\n  const currentListId = id;\n\n  const listIdArr = _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.getAllListIds();\n  const listTitlesArr = _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.getAllListTitles();\n\n  const arr = [..._index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.getAllListItems(currentListId)];\n\n  for (let i = 0; i < arr.length; i++) {\n    // console.log(arr[i]);\n\n    // parent of itemIsCompletedCheckBoxDiv, itemContainer, deleteItemBtnContainer\n    const itemContainer = document.createElement(\"div\");\n    itemContainer.classList.add(\"itemContainer\");\n\n    // child of itemContainer, sibling of itemFieldsContainer, deleteItemBtnContainer\n    const itemIsCompletedCheckBoxDiv = document.createElement(\"div\");\n    itemIsCompletedCheckBoxDiv.classList.add(\"itemIsCompletedCheckBoxDiv\");\n\n    // child of itemContainer, sibling of itemIsCompletedCheckBoxDiv, deleteItemBtnContainer\n    const itemFieldsContainer = document.createElement(\"div\");\n    itemFieldsContainer.classList.add(\"itemFieldsContainer\");\n\n    // child of itemContainer, sibling of itemFieldsContainer, itemIsCompletedCheckBoxDiv\n    const deleteItemBtnContainer = document.createElement(\"div\");\n    deleteItemBtnContainer.classList.add(\"deleteItemBtnContainer\");\n\n    const createTextField = (text, container, method) => {\n      const value = arr[i][text];\n      let enterKeyPressed = false;\n      const cellContainer = document.createElement(\"div\");\n      const cell = document.createElement(\"input\");\n      cell.setAttribute(`data-${text}`, arr[i].itemId);\n      cell.classList.add(\"fields\");\n      const br = document.createElement(\"br\");\n      const label = document.createElement(\"label\");\n      cell.value = value;\n      label.classList.add(\"listItemLabel\");\n      label.innerText = text.slice(4);\n      cell.contentEditable = \"true\";\n      cell.addEventListener(\"keypress\", function (e) {\n        if (e.key === \"Enter\") {\n          cell.innerText;\n          _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager[method](arr[i].itemId, cell.value); // sets value in listManager\n          cell.blur();\n          e.preventDefault();\n        }\n      });\n      cell.onblur = () => {\n        if (enterKeyPressed) {\n          enterKeyPressed = false;\n          return;\n        }\n        _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager[method](arr[i].itemId, cell.value); // sets value in listManager\n      };\n      cellContainer.append(cell, br, label);\n      container.append(cellContainer);\n    };\n\n    const createDateField = (text, container, method) => {\n      const value = arr[i][text];\n      const cellContainer = document.createElement(\"div\");\n      const cell = document.createElement(\"input\");\n      cell.setAttribute(`data-${text}`, arr[i].itemId);\n      cell.classList.add(\"fields\");\n      const br = document.createElement(\"br\");\n      const label = document.createElement(\"label\");\n      label.classList.add(\"listItemLabel\");\n      label.innerText = \"Due Date\";\n      cell.setAttribute(\"type\", \"date\");\n      cell.value = value;\n      if (value === \"\" || value === null || value === undefined) {\n        cell.style.color = \"lightGrey\";\n      }\n      cell.onblur = () => {\n        _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager[method](arr[i].itemId, cell.value); // sets value in listManager\n        if (\n          cell.value !== \"\" &&\n          cell.value !== null &&\n          cell.value !== undefined\n        ) {\n          cell.style.color = \"black\";\n        } else if (\n          cell.value === \"\" ||\n          cell.value === null ||\n          cell.value === undefined\n        ) {\n          cell.style.color = \"lightGrey\";\n        }\n      };\n      cellContainer.append(cell, br, label);\n      container.append(cellContainer);\n    };\n\n    const createSelectPriority = (text, container, method) => {\n      const value = arr[i][text];\n      const cellContainer = document.createElement(\"div\");\n      const cell = document.createElement(\"select\");\n      cell.setAttribute(`data-${text}`, arr[i].itemId);\n      cell.classList.add(\"fields\");\n      const br = document.createElement(\"br\");\n      const label = document.createElement(\"label\");\n      label.classList.add(\"listItemLabel\");\n      label.innerText = text.slice(4);\n      const optArr = [\"\", \"!\", \"!!\", \"!!!\"];\n      for (let i = 0; i < optArr.length; i++) {\n        const opt = document.createElement(\"option\");\n        opt.value = optArr[i];\n        opt.text = optArr[i];\n        cell.style.fontWeight = \"bold\";\n        cell.appendChild(opt);\n      }\n      cell.value = value;\n      cell.onblur = () => {\n        _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager[method](arr[i].itemId, cell.value); // sets value in listManager\n      };\n      cellContainer.append(cell, br, label);\n      container.append(cellContainer);\n    };\n\n    const createSelectListId = (text, container, method) => {\n      const value = currentListId;\n      const cellContainer = document.createElement(\"div\");\n      const cell = document.createElement(\"select\");\n      cell.setAttribute(`data-${text}`, arr[i].itemId);\n      cell.classList.add(\"fields\");\n      const br = document.createElement(\"br\");\n      const label = document.createElement(\"label\");\n      label.classList.add(\"listItemLabel\");\n      label.innerText = \"List\";\n      const optArr = [...listIdArr];\n      const optArrDisplay = [...listTitlesArr];\n      for (let i = 0; i < optArr.length; i++) {\n        const opt = document.createElement(\"option\");\n        opt.value = optArr[i];\n        opt.text = `${optArrDisplay[i]} - ID# ${optArr[i]}`;\n        cell.appendChild(opt);\n      }\n      cell.value = value;\n      cell.onchange = () => {\n        _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager[method](arr[i].itemId, currentListId, cell.value); // sets value in listManager\n        displayListItemsByListId(currentListId);\n      };\n      cellContainer.append(cell, br, label);\n      container.append(cellContainer);\n    };\n\n    const createItemIsCompletedCheckbox = () => {\n      const itemIsCompletedCheckbox = document.createElement(\"INPUT\");\n      itemIsCompletedCheckbox.setAttribute(\"type\", \"checkbox\");\n      itemIsCompletedCheckbox.checked = arr[i].itemIsCompleted;\n      itemIsCompletedCheckbox.addEventListener(\"click\", () => {\n        arr[i].itemIsCompleted = !arr[i].itemIsCompleted;\n      });\n      itemIsCompletedCheckBoxDiv.classList.add(\"itemIsCompletedCheckBoxDiv\");\n      itemIsCompletedCheckBoxDiv.append(itemIsCompletedCheckbox);\n    };\n\n    const createDeleteItemBtn = () => {\n      const deleteItemBtn = document.createElement(\"button\");\n      deleteItemBtn.innerText = \"X\";\n      deleteItemBtn.classList.add(\"deleteBtn\");\n      deleteItemBtn.addEventListener(\"click\", () => {\n        _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.deleteItem(arr[i].itemId, currentListId);\n        (0,_displayList_js__WEBPACK_IMPORTED_MODULE_1__.displayList)(currentListId); // TODO - refactor logic between this and displayList so header is not re-rendered on every delete press, but \"There are currently no tasks\" card still shows.\n      });\n      deleteItemBtnContainer.append(deleteItemBtn);\n    };\n\n    createItemIsCompletedCheckbox();\n    createTextField(\"itemTitle\", itemFieldsContainer, \"setItemTitle\");\n    createTextField(\n      \"itemDescription\",\n      itemFieldsContainer,\n      \"setItemDescription\"\n    );\n    //createTextField(\"itemNotes\", itemFieldsContainer, \"setItemNotes\");\n    createSelectListId(\"listId\", itemFieldsContainer, \"setItemToDifferentList\");\n    createDateField(\"itemDueDate\", itemFieldsContainer, \"setItemDueDate\");\n    createSelectPriority(\n      \"itemPriority\",\n      itemFieldsContainer,\n      \"setItemPriority\"\n    );\n    createDeleteItemBtn();\n\n    // Append children to itemContainer\n    itemContainer.append(itemIsCompletedCheckBoxDiv);\n    itemContainer.append(itemFieldsContainer);\n    itemContainer.append(deleteItemBtnContainer);\n\n    // Append itemContainer to itemContainerContainer\n    itemContainerContainer.append(itemContainer);\n  }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (displayListItemsByListId);\n\n\n//# sourceURL=webpack:///./src/displayListItemsByListId.js?");

/***/ }),

/***/ "./src/displaySideBarLists.js":
/*!************************************!*\
  !*** ./src/displaySideBarLists.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"./src/index.js\");\n/* harmony import */ var _displayList_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./displayList.js */ \"./src/displayList.js\");\n\n\n\nconst displayAllLists = () => {\n  const listContainer = document.querySelector(\"#listContainer\");\n  listContainer.replaceChildren(); // clears prior view of existing lists\n\n  const lists = _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.getAllLists();\n\n  for (let i = 0; i < lists.length; i++) {\n    const thisListId = lists[i].listId;\n\n    const thisList = document.createElement(\"div\");\n    listContainer.append(thisList);\n\n    // viewListBtn - same on all Lists\n    const createViewListBtn = () => {\n      const viewListBtn = document.createElement(\"button\");\n      viewListBtn.innerText = \"View\";\n      viewListBtn.classList.add(\"normal-button-plus\");\n      viewListBtn.addEventListener(\"click\", () => {\n        (0,_displayList_js__WEBPACK_IMPORTED_MODULE_1__.displayList)(thisListId);\n      });\n      thisList.append(viewListBtn);\n    };\n\n    // listTitleField - different for unassigned tasks vs. user lists\n    const createListTitleField = (listId) => {\n      let listTitleField;\n      // leave this conditional in, in case putting unassigned tasks list back in is desired\n      if (listId === \"L10000\") {\n        listTitleField = document.createElement(\"div\");\n        listTitleField.innerText = \"Unassigned Tasks\";\n        listTitleField.classList.add(\"unassignedItemsListTitle\");\n      } else {\n        listTitleField = document.createElement(\"input\");\n        listTitleField.value = lists[i].listTitle;\n        listTitleField.classList.add(\"fields\");\n        listTitleField.maxLength = 28;\n      }\n      listTitleField.setAttribute(\"data-list-title-id\", thisListId);\n      thisList.append(listTitleField);\n      listTitleField.addEventListener(\"keydown\", function (e) {\n        if (e.key === \"Enter\") {\n          listTitleField.blur();\n          (0,_displayList_js__WEBPACK_IMPORTED_MODULE_1__.displayList)(thisListId);\n          e.preventDefault();\n        }\n      });\n      listTitleField.addEventListener(\"change\", function () {\n        const newValue = listTitleField.value.trim();\n        const oldValue = lists[i].listTitle.trim();\n\n        if (newValue !== oldValue) {\n          _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.setListTitle(thisListId, newValue);\n          (0,_displayList_js__WEBPACK_IMPORTED_MODULE_1__.displayList)(thisListId);\n        }\n      });\n      thisList.append(listTitleField);\n    };\n\n    // listIDField - same on each list\n    const createListIdField = () => {\n      const listIdField = document.createElement(\"div\");\n      listIdField.innerText = lists[i].listId;\n      listIdField.classList.add(\"listIdField\");\n      listIdField.setAttribute(\"data-list-title-id\", thisListId);\n      thisList.append(listIdField);\n    };\n\n    // Normal, editable list DOM builds\n    const createDeleteListBtnDiv = (listId) => {\n      const deleteListBtnDiv = document.createElement(\"div\");\n      deleteListBtnDiv.classList.add(\"deleteBtnDiv\");\n      const deleteListBtn = document.createElement(\"button\");\n      deleteListBtn.addEventListener(\"click\", function () {\n        _index_js__WEBPACK_IMPORTED_MODULE_0__.listManager.deleteList(thisListId);\n      });\n      deleteListBtn.classList.add(\"deleteBtn\");\n      deleteListBtn.innerText = \"X\";\n      thisList.append(deleteListBtnDiv);\n      // leave this conditional in, in case putting unassigned tasks list back in is desired\n      if (listId === \"L10000\") {\n        return;\n      }\n      deleteListBtnDiv.append(deleteListBtn);\n    };\n\n    const setThisListStyling = (listId) => {\n      // leave this conditional in, in case putting unassigned tasks list back in is desired\n      if (listId === \"L10000\") {\n        thisList.classList.add(\"unassignedItemsList\");\n      } else {\n        thisList.classList.add(\"thisList\");\n      }\n    };\n\n    if (lists[i].listId !== \"L10000\") {\n      createViewListBtn();\n      createListTitleField(thisListId);\n      createListIdField(thisListId);\n      createDeleteListBtnDiv(thisListId);\n      setThisListStyling(thisListId);\n    }\n  }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (displayAllLists);\n\n\n//# sourceURL=webpack:///./src/displaySideBarLists.js?");

/***/ }),

/***/ "./src/focus.js":
/*!**********************!*\
  !*** ./src/focus.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   focusItemTitle: () => (/* binding */ focusItemTitle),\n/* harmony export */   focusListTitle: () => (/* binding */ focusListTitle)\n/* harmony export */ });\nconst focusListTitle = (id) => {\n    const listTitleField = document.querySelector(`[data-list-title-id=${id}]`);\n    listTitleField.focus();\n}\n\nconst focusItemTitle = (id) => {\n    // console.log(`ID in focusItemTitle: ${id}`)\n    const listItemTitleField = document.querySelector(`[data-itemtitle=${id}]`);\n    listItemTitleField.focus();\n}\n\n\n\n//# sourceURL=webpack:///./src/focus.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   listManager: () => (/* binding */ listManager)\n/* harmony export */ });\n/* harmony import */ var _ListManager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ListManager.js */ \"./src/ListManager.js\");\n/* harmony import */ var _displaySideBarLists_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./displaySideBarLists.js */ \"./src/displaySideBarLists.js\");\n/* harmony import */ var _displayAllTasks_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./displayAllTasks.js */ \"./src/displayAllTasks.js\");\n/* harmony import */ var _createListButtons_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./createListButtons.js */ \"./src/createListButtons.js\");\n\n\n\n\n// import \"./styles.css\" // uncomment for workaround for generating styles.css in dist folder\n\nlet listManager;\n\nconst initializeApp = () => {\n  (0,_displaySideBarLists_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n  (0,_createListButtons_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n  (0,_displayAllTasks_js__WEBPACK_IMPORTED_MODULE_2__.displayAllTasks)();\n};\n\nconst loadLocalStorage = () => {\n  const listManagerFromStorage = localStorage.getItem(\"ListManager\");\n  if (!listManagerFromStorage || listManagerFromStorage === undefined) {\n    // if ListManager is not available in localStorage, create a new one\n    listManager = new _ListManager_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    // Save new ListManager to localStorage\n    localStorage.setItem(\"ListManager\", JSON.stringify(listManager));\n    console.log(\"New ListManager created and saved to localStorage.\");\n  } else {\n    // if ListManager is in localStorage, parse and assign it\n    const listManagerData = JSON.parse(listManagerFromStorage);\n    // Manually reconstruct the ListManager instance\n    listManager = new _ListManager_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    // Assign properties from the parsed data to the new ListManager instance\n    Object.assign(listManager, listManagerData);\n    console.log(\"ListManager loaded from localStorage:\", listManager);\n  }\n  // Call initializeApp after setting listManager\n  initializeApp();\n\n};\n\nloadLocalStorage();\n\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/list.js":
/*!*********************!*\
  !*** ./src/list.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ List)\n/* harmony export */ });\nclass List {\n    static newListId = localStorage.getItem(\"newListId\") || 10000;\n\n    constructor (listTitle, listItems = []) {\n        this.listId = `L${List.newListId++}`; // adds L prefix to each list and increments newListId\n        this.listTitle = listTitle;\n        this.listItems = listItems;\n    }\n\n    static createList = (listTitle) => {\n        return new List(listTitle);\n    }\n}\n\n//# sourceURL=webpack:///./src/list.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;